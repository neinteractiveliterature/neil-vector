api:
  enabled: false

sources:
  # stdin:
  #   type: stdin
  fly_nats:
    type: "nats"
    url: "nats://[fdaa::3]:4223"
    queue: "${QUEUE-}"
    subject: "logs.>"
    auth:
      strategy: "user_password"
      user_password:
        user: "new-england-interactive-literature"
        password: "${ACCESS_TOKEN?}"
    connection_name: "Fly logs stream"
  heroku_logs:
    type: heroku_logs
    address: "0.0.0.0:$PORT"
    query_parameters: ["application"]
    auth:
      username: "${HEROKU_SOURCE_USERNAME}"
      password: "${HEROKU_SOURCE_PASSWORD}"

transforms:
  reduce_heroku_logs:
    type: reduce
    inputs:
      - heroku_logs
    group_by:
      - app_name
      - application
      - proc_id
    merge_strategies:
      message: concat_raw
    ends_when: |
      string_msg = string!(.message)
      ends_with(string_msg, "}") || !starts_with(string_msg, "{")
    expire_after_ms: 100
    flush_period_ms: 100
  map_heroku_proc_id_to_proc_role:
    type: remap
    inputs:
      - reduce_heroku_logs
    source: '.proc_role = split(.proc_id, ".")[0] ?? "unknown"'
  preparse_nats_payload:
    type: remap
    inputs:
      - fly_nats
    source: ". = parse_json!(.message)"
  map_fly_app_name_to_application:
    type: remap
    inputs:
      - preparse_nats_payload
    source: ".application = .fly.app.name"
  drop_own_logs:
    type: filter
    inputs:
      - map_fly_app_name_to_application
    condition: '.application != "neil-vector"'
  parse_json_message:
    type: remap
    inputs:
      - map_heroku_proc_id_to_proc_role
      - drop_own_logs
    source: |
      structured = parse_json(.message) ?? null
      if is_object(structured) {
        ., err = merge(., structured)
        if err == null {
          del(.message)
        }
      }
  map_fly_process_group_to_proc_role:
    type: remap
    inputs:
      - parse_json_message
    source: |
      if .fly_process_group != null {
        .proc_role = .fly_process_group
      }
  route_by_app_name:
    type: route
    inputs:
      - map_fly_process_group_to_proc_role
    route:
      intercode: '.application == "intercode" || .application == "Intercode"'
      intercon_furniture: '.application == "intercon-furniture"'
      larp_library: '.application == "larp-library" || .application == "LarpLibrary"'
      listmonk: '.application == "neil-listmonk"'

sinks:
  console:
    type: console
    inputs:
      - parse_json_message
    encoding:
      codec: json
  cloudwatch_intercode:
    inputs:
      - route_by_app_name.intercode
    group_name: intercode2_production
    type: aws_cloudwatch_logs
    stream_name: "{{ .proc_role }}"
    region: us-east-1
    encoding:
      codec: json
  cloudwatch_intercon_furniture:
    inputs:
      - route_by_app_name.intercon_furniture
    group_name: intercon_furniture_production
    type: aws_cloudwatch_logs
    stream_name: "{{ .proc_role }}"
    region: us-east-1
    encoding:
      codec: json
  cloudwatch_larp_library:
    inputs:
      - route_by_app_name.larp_library
    group_name: larp_library_production
    type: aws_cloudwatch_logs
    stream_name: "{{ .proc_role }}"
    region: us-east-1
    encoding:
      codec: json
  cloudwatch_listmonk:
    inputs:
      - route_by_app_name.listmonk
    group_name: listmonk_production
    type: aws_cloudwatch_logs
    stream_name: "{{ .proc_role }}"
    region: us-east-1
    encoding:
      codec: json
